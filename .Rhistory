#   packages: a vector of package names
#
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
if (!package %in% installed.packages()) install.packages(package)
library(package, character.only=T)
}
}
}
LoadPackages(c("rvest", "dplyr", "tibble", "stringr", "igraph", "networkD3"
"ggplot2"))
LoadPackages <- function(packages) {
# Load or install packages if they aren't already loaded.
#
# Args:
#   packages: a vector of package names
#
for (package in packages) {
if (!require(package, character.only=T, quietly=T)) {
if (!package %in% installed.packages()) install.packages(package)
library(package, character.only=T)
}
}
}
LoadPackages(c("rvest", "dplyr", "tibble", "stringr", "igraph", "networkD3",
"ggplot2"))
ranking[1:5,]
ggplot(ranking[1:5,], aes(x = Boxer, y = Page_Rank)) +
geom_col()
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col()
ggplot(ranking[1:5,], aes(x = reorder(Boxer, -Page_Rank), y = Page_Rank)) +
geom_col()
ggplot(ranking[1:5,], aes(x = reorder(Boxer, -Page_Rank), y = Page_Rank)) +
geom_col() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black"))
ggplot(ranking[1:5,], aes(x = reorder(Boxer, -Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black"))
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black"))
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .2))
ranking
seq(0, .12, .2)
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .02))
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .02)) +
labs(title = "Top 5 HW Boxers", y = "Page Rank", "Name")
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .02)) +
labs(title = "Top 5 HW Boxers", y = "Page Rank", x = "Name")
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col() +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .02)) +
labs(title = "Top 5 HW Boxers", y = "Page Rank", x = "Boxer's Name")
ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank), y = Page_Rank)) +
geom_col(fill = '#F7AD50', color = '#3F97D0') +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .02)) +
labs(title = "Top 5 HW Boxers", y = "Page Rank", x = "Boxer's Name")
top5_bar_chart <- ggplot(ranking[1:5,], aes(x = reorder(Boxer, Page_Rank),
y = Page_Rank)) +
geom_col(fill = '#F7AD50', color = '#3F97D0') +
coord_flip() +
theme_bw() +
theme(plot.title = element_text(hjust = .5, size = 22, face = "bold"),
axis.text=element_text(size=12),
axis.title=element_text(size=16),
axis.line = element_line(colour = "black")) +
scale_y_continuous(breaks = seq(0, .12, .02)) +
labs(title = "Top 5 HW Boxers", y = "Page Rank", x = "Boxer's Name")
ggsave(filename = 'top5_bar_chart', plot = top5_bar_chart,
path = '../data/')
ggsave(filename = 'top5_bar_chart', plot = top5_bar_chart,
path = '../data/', device = "png")
ggsave(filename = 'top5_bar_chart.png', plot = top5_bar_chart,
path = '../data/', device = "png")
ggsave(filename = 'top5_bar_chart.png', plot = top5_bar_chart,
path = '../data/', device = "png", width = 7, height = 4)
top5_bar_chart
boxers_g
fake_records <- data.frame(from = seq(1,40,1),
to = rep("tom", 40),
weight = rep(1.5, 40)) %>%
mutate(from = as.character(from)) %>%
bind_rows(relations)
relations
data.frame(from = seq(1,40,1),
to = rep("tom", 40),
weight = rep(1.5, 40))
fake_records <- data.frame(from = seq(1,40,1),
to = rep("tom", 40),
weight = rep(1.5, 40)) %>%
mutate(from = as.character(from),
to = as.character(to)) %>%
bind_rows(relations)
fake_records <- data.frame(from = seq(1,40,1),
to = rep("tom", 40),
weight = rep(1.5, 40)) %>%
mutate(from = as.character(from),
to = as.character(to)) %>%
bind_rows(relations)
# names of boxers in sample
boxers_df2 = data.frame(name = union(fake_records$to, fake_records$from))
# create igraph object
fake_g <- graph_from_data_frame(fake_records, directed = T,
vertices = boxers_df2)
ranking_fake <- pr$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank)
ranking_fake
fake_records <- data.frame(from = seq(1,40,1),
to = rep("tom", 40),
weight = rep(1.5, 40)) %>%
mutate(from = as.character(from),
to = as.character(to)) %>%
bind_rows(relations)
# names of boxers in sample
boxers_df2 = data.frame(name = union(fake_records$to, fake_records$from))
# create igraph object
fake_g <- graph_from_data_frame(fake_records, directed = T,
vertices = boxers_df2)
pr2 <- page_rank(boxers_g, algo = "prpack", vids = V(boxers_g),
directed = TRUE, damping = .9999)
ranking_fake <- pr2$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank)
ranking_fake
fake_records <- data.frame(from = seq(1,40,1),
to = rep("tom", 40),
weight = rep(1.5, 40)) %>%
mutate(from = as.character(from),
to = as.character(to)) %>%
bind_rows(relations)
# names of boxers in sample
boxers_df2 = data.frame(name = union(fake_records$to, fake_records$from))
# create igraph object
fake_g <- graph_from_data_frame(fake_records, directed = T,
vertices = boxers_df2)
pr2 <- page_rank(fake_g, algo = "prpack", vids = V(boxers_g),
directed = TRUE, damping = .9999)
pr2 <- page_rank(fake_g, algo = "prpack", vids = V(fake_g),
directed = TRUE, damping = .9999)
ranking_fake <- pr2$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank)
ranking_fake
# boxer based on on PR ranking
b <- ranking$Boxer[19]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[20]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[21]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[11]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[14]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[21]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[20]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[21]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
relations
relations %>%
group_by(to) %>%
summarize(Wins = n())
# create a dataframe of boxer's ranking and sort
ranking <- pr$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank) %>%
left_join(relations %>%
group_by(to) %>%
summarize(Wins = n()), by = c("Boxer", "to"))
# create a dataframe of boxer's ranking and sort
ranking <- pr$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank) %>%
left_join(relations %>%
group_by(to) %>%
summarize(Wins = n()), by = c("Boxer" = "to"))
ranking
# boxer based on on PR ranking
b <- ranking$Boxer[10]
# boxer based on on PR ranking
b <- ranking$Boxer[10]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# boxer based on on PR ranking
b <- ranking$Boxer[17]
# boxer name
b
# number of wins
relations %>% filter(to == b )
# wins against top boxers
relations %>% filter(to == b & from %in% boxer_names)
# losses
relations %>% filter(from == b )
# page rank centrality
# PageRank theory suggests that an imaginary flow of losses that is randomly
# going from one boxer to another will eventually stop. The damping factor is
# the probability that the flow will continue at any step. Setting the damping
# factor to 1 implies the flow of random losses will continue and when its
# applied to the network it will end on a boxer with no losses making that
# boxer's importance higher. Boxer's with no losses "absorb" more of the
# importance from boxer's that they beat. (AJ has higher
# page rank value when damping is set to 1. When damping = 0 then they all have
# the same value)
# boxers aren't directly penalized for losses but the PR values sum up to 1 so
# when another boxer's PR value increases from wins other boxers value goes down
pr <- page_rank(boxers_g, algo = "prpack", vids = V(boxers_g),
directed = TRUE, damping = .5) # damping = 1 wont converge
# create a dataframe of boxer's ranking and sort
ranking <- pr$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank) %>%
left_join(relations %>%
group_by(to) %>%
summarize(Wins = n()), by = c("Boxer" = "to"))
ranking
# page rank centrality
# PageRank theory suggests that an imaginary flow of losses that is randomly
# going from one boxer to another will eventually stop. The damping factor is
# the probability that the flow will continue at any step. Setting the damping
# factor to 1 implies the flow of random losses will continue and when its
# applied to the network it will end on a boxer with no losses making that
# boxer's importance higher. Boxer's with no losses "absorb" more of the
# importance from boxer's that they beat. (AJ has higher
# page rank value when damping is set to 1. When damping = 0 then they all have
# the same value)
# boxers aren't directly penalized for losses but the PR values sum up to 1 so
# when another boxer's PR value increases from wins other boxers value goes down
pr <- page_rank(boxers_g, algo = "prpack", vids = V(boxers_g),
directed = TRUE, damping = .9999) # damping = 1 wont converge
# create a dataframe of boxer's ranking and sort
ranking <- pr$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank) %>%
left_join(relations %>%
group_by(to) %>%
summarize(Wins = n()), by = c("Boxer" = "to"))
ranking
# col names that indentifies a win/loss record table
req_names = c("Result", "Record", "Opponent")
record_lst = list()
# for each boxer extract win/loss record form wikipedia url
for (i in 1:length(urls)){
# read tables on webpage
tbl <- read_html(urls[i]) %>%
html_nodes(css = 'table')
# for each table check if it's the win/loss record
for (j in 1:length(tbl)){
# convert html table to dataframe
record_temp = tbl[j] %>% html_table(fill = TRUE) %>% as.data.frame()
# check if the names in table look like a table with win/loss record
if(length(intersect(req_names, record_temp %>% names())) == 3) {
# save the win/loss record to a list of records
record_lst[[i]] <- record_temp %>%
# create col for boxer's name
mutate(boxer = boxer_names[i])
# break out of loop because record was found
break
}
# vector of values for fist row
row1 <- record_temp %>% slice(1) %>% unlist(.,use.names = F)
# if the first row looks like col names of record table
if(length(intersect(req_names, row1)) == 3){
# use the first row values as col names
names(record_temp) <- row1
# remove first first row
record_temp <- record_temp[-1,]
# save the win/loss record to a list of records
record_lst[[i]] <- record_temp %>%
# create a col for boxer's name
mutate(boxer = boxer_names[i],
`No.` = as.integer(`No.`))
# break out of loop because record was found
break
}
}
}
# remove null entries from list
# some boxers may not have win/loss records on their wikipeida page
record_lst <- record_lst[!sapply(record_lst, is.null)]
# saveRDS(record_lst, "../data/record_lst.rds")
# record_lst <- readRDS("../data/record_lst.rds")
record_df <- bind_rows(record_lst) %>%
# only wins
filter(Result %in% c("Win")) #%>%
# filter for only wins against other top boxers
#filter(Opponent %in% boxer_names) # might re-consider this
# includeing draws makes Fury and Wilder completely dominate the network
# based on PR scores
# boxer's records that weren't available
# setdiff(boxer_names, unique(record_df$boxer))
relations <- record_df %>%
# centrality measure gives importance to nodes with more edges directed toward
# a node. Therefore, relationships is defined as opponent gives a loss to boxer
mutate(to = boxer, from = Opponent) %>%
select(from, to, Result, Type) %>%
# create weights for different win outcomes
# weights don't appear to affect page rank much
mutate(weight =
case_when(#Result == "Draw" ~ .5,
Result == "Win" & Type %in% c("DQ", "TD") ~ 1,
Result == "Win" & Type %in% c("SD", "DEC") ~ 1.25,
Result == "Win" & Type %in% c("PTS", "MD") ~ 1.5,
Result == "Win" & Type %in% c("UD") ~ 1.75,
Result == "Win" & Type %in% c("TKO", "KO", "RTD") ~ 2)) %>%
# sum the weights and remove dupes
group_by(from, to) %>%
mutate(weight = sum(weight), rn = row_number()) %>%
ungroup() %>%
filter(rn == 1) %>%
select(from, to, weight)
# names of boxers in sample
boxers_df = data.frame(name = union(relations$to, relations$from))
# create igraph object
boxers_g <- graph_from_data_frame(relations, directed = T, vertices = boxers_df)
# save igraph object. to be plotted using gephi
# write_graph(boxers_g, file = '../data/boxers_g.gml', format = 'gml')
# page rank centrality
# PageRank theory suggests that an imaginary flow of losses that is randomly
# going from one boxer to another will eventually stop. The damping factor is
# the probability that the flow will continue at any step. Setting the damping
# factor to 1 implies the flow of random losses will continue and when its
# applied to the network it will end on a boxer with no losses making that
# boxer's importance higher. Boxer's with no losses "absorb" more of the
# importance from boxer's that they beat. (AJ has higher
# page rank value when damping is set to 1. When damping = 0 then they all have
# the same value)
# boxers aren't directly penalized for losses but the PR values sum up to 1 so
# when another boxer's PR value increases from wins other boxers value goes down
pr <- page_rank(boxers_g, algo = "prpack", vids = V(boxers_g),
directed = TRUE, damping = .9999) # damping = 1 wont converge
# create a dataframe of boxer's ranking and sort
ranking <- pr$vector %>%
as.data.frame() %>%
rownames_to_column("Boxer") %>%
rename(Page_Rank = 2) %>%
arrange(desc(Page_Rank)) %>%
mutate(RN = row_number()) %>%
select(RN, Boxer, Page_Rank) %>%
left_join(relations %>%
group_by(to) %>%
summarize(Wins = n()), by = c("Boxer" = "to"))
ranking
# # boxer based on on PR ranking
# b <- ranking$Boxer[17]
# # boxer name
# b
# # number of wins
# relations %>% filter(to == b )
# # wins against top boxers
# relations %>% filter(to == b & from %in% boxer_names)
# # losses
# relations %>% filter(from == b )
saveRDS(ranking, "../data/ranking.rds")
